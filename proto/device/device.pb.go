// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.14.0
// source: proto/device/device.proto

package device

import (
	common "edgex-cloud-sdk-go/proto/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProtocolProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pp map[string]string `protobuf:"bytes,1,rep,name=pp,proto3" json:"pp,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ProtocolProperties) Reset() {
	*x = ProtocolProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_device_device_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolProperties) ProtoMessage() {}

func (x *ProtocolProperties) ProtoReflect() protoreflect.Message {
	mi := &file_proto_device_device_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolProperties.ProtoReflect.Descriptor instead.
func (*ProtocolProperties) Descriptor() ([]byte, []int) {
	return file_proto_device_device_proto_rawDescGZIP(), []int{0}
}

func (x *ProtocolProperties) GetPp() map[string]string {
	if x != nil {
		return x.Pp
	}
	return nil
}

//新增子设备
type DeviceAddInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` //不可更改，必填
	Name            string                         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description     string                         `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ProductId       string                         `protobuf:"bytes,4,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	Ip              string                         `protobuf:"bytes,5,opt,name=ip,proto3" json:"ip,omitempty"`
	Lat             string                         `protobuf:"bytes,6,opt,name=lat,proto3" json:"lat,omitempty"`
	Lon             string                         `protobuf:"bytes,7,opt,name=lon,proto3" json:"lon,omitempty"`
	VendorCode      string                         `protobuf:"bytes,8,opt,name=vendorCode,proto3" json:"vendorCode,omitempty"`
	InstallLocation string                         `protobuf:"bytes,9,opt,name=installLocation,proto3" json:"installLocation,omitempty"`
	ExtendData      string                         `protobuf:"bytes,10,opt,name=extend_data,json=extendData,proto3" json:"extend_data,omitempty"`
	IsIpcDev        bool                           `protobuf:"varint,11,opt,name=is_ipc_dev,json=isIpcDev,proto3" json:"is_ipc_dev,omitempty"` //设备增加后不可更改，默认为false
	Protocols       map[string]*ProtocolProperties `protobuf:"bytes,12,rep,name=protocols,proto3" json:"protocols,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ServiceId       string                         `protobuf:"bytes,13,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	OnlineStatus    string                         `protobuf:"bytes,14,opt,name=online_status,json=onlineStatus,proto3" json:"online_status,omitempty"`
	ActiveStatus    string                         `protobuf:"bytes,15,opt,name=active_status,json=activeStatus,proto3" json:"active_status,omitempty"`
	CloudDeviceId   string                         `protobuf:"bytes,16,opt,name=cloud_device_id,json=cloudDeviceId,proto3" json:"cloud_device_id,omitempty"`
	ScreenType      string                         `protobuf:"bytes,17,opt,name=screen_type,json=screenType,proto3" json:"screen_type,omitempty"`
	ParentCloudId   string                         `protobuf:"bytes,18,opt,name=parent_cloud_id,json=parentCloudId,proto3" json:"parent_cloud_id,omitempty"`     // 父级id
	IsScreenDevice  bool                           `protobuf:"varint,19,opt,name=is_screen_device,json=isScreenDevice,proto3" json:"is_screen_device,omitempty"` // 是否为中控设备
}

func (x *DeviceAddInfo) Reset() {
	*x = DeviceAddInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_device_device_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceAddInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceAddInfo) ProtoMessage() {}

func (x *DeviceAddInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_device_device_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceAddInfo.ProtoReflect.Descriptor instead.
func (*DeviceAddInfo) Descriptor() ([]byte, []int) {
	return file_proto_device_device_proto_rawDescGZIP(), []int{1}
}

func (x *DeviceAddInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeviceAddInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeviceAddInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DeviceAddInfo) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *DeviceAddInfo) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *DeviceAddInfo) GetLat() string {
	if x != nil {
		return x.Lat
	}
	return ""
}

func (x *DeviceAddInfo) GetLon() string {
	if x != nil {
		return x.Lon
	}
	return ""
}

func (x *DeviceAddInfo) GetVendorCode() string {
	if x != nil {
		return x.VendorCode
	}
	return ""
}

func (x *DeviceAddInfo) GetInstallLocation() string {
	if x != nil {
		return x.InstallLocation
	}
	return ""
}

func (x *DeviceAddInfo) GetExtendData() string {
	if x != nil {
		return x.ExtendData
	}
	return ""
}

func (x *DeviceAddInfo) GetIsIpcDev() bool {
	if x != nil {
		return x.IsIpcDev
	}
	return false
}

func (x *DeviceAddInfo) GetProtocols() map[string]*ProtocolProperties {
	if x != nil {
		return x.Protocols
	}
	return nil
}

func (x *DeviceAddInfo) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *DeviceAddInfo) GetOnlineStatus() string {
	if x != nil {
		return x.OnlineStatus
	}
	return ""
}

func (x *DeviceAddInfo) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *DeviceAddInfo) GetCloudDeviceId() string {
	if x != nil {
		return x.CloudDeviceId
	}
	return ""
}

func (x *DeviceAddInfo) GetScreenType() string {
	if x != nil {
		return x.ScreenType
	}
	return ""
}

func (x *DeviceAddInfo) GetParentCloudId() string {
	if x != nil {
		return x.ParentCloudId
	}
	return ""
}

func (x *DeviceAddInfo) GetIsScreenDevice() bool {
	if x != nil {
		return x.IsScreenDevice
	}
	return false
}

type AddDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *DeviceAddInfo `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *AddDeviceRequest) Reset() {
	*x = AddDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_device_device_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDeviceRequest) ProtoMessage() {}

func (x *AddDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_device_device_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDeviceRequest.ProtoReflect.Descriptor instead.
func (*AddDeviceRequest) Descriptor() ([]byte, []int) {
	return file_proto_device_device_proto_rawDescGZIP(), []int{2}
}

func (x *AddDeviceRequest) GetDevice() *DeviceAddInfo {
	if x != nil {
		return x.Device
	}
	return nil
}

type AddDevicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devices []*DeviceAddInfo `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
}

func (x *AddDevicesRequest) Reset() {
	*x = AddDevicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_device_device_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDevicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDevicesRequest) ProtoMessage() {}

func (x *AddDevicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_device_device_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDevicesRequest.ProtoReflect.Descriptor instead.
func (*AddDevicesRequest) Descriptor() ([]byte, []int) {
	return file_proto_device_device_proto_rawDescGZIP(), []int{3}
}

func (x *AddDevicesRequest) GetDevices() []*DeviceAddInfo {
	if x != nil {
		return x.Devices
	}
	return nil
}

//更新子设备属性
type DeviceUpdateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` //不可更改，唯一查找条件
	Name            *string                        `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Description     *string                        `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	ProductId       *string                        `protobuf:"bytes,4,opt,name=product_id,json=productId,proto3,oneof" json:"product_id,omitempty"`
	Ip              *string                        `protobuf:"bytes,5,opt,name=ip,proto3,oneof" json:"ip,omitempty"`
	Lat             *string                        `protobuf:"bytes,6,opt,name=lat,proto3,oneof" json:"lat,omitempty"`
	Lon             *string                        `protobuf:"bytes,7,opt,name=lon,proto3,oneof" json:"lon,omitempty"`
	VendorCode      *string                        `protobuf:"bytes,8,opt,name=vendorCode,proto3,oneof" json:"vendorCode,omitempty"`
	InstallLocation *string                        `protobuf:"bytes,9,opt,name=installLocation,proto3,oneof" json:"installLocation,omitempty"`
	ExtendData      *string                        `protobuf:"bytes,10,opt,name=extend_data,json=extendData,proto3,oneof" json:"extend_data,omitempty"`
	Protocols       map[string]*ProtocolProperties `protobuf:"bytes,12,rep,name=protocols,proto3" json:"protocols,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ServiceId       *string                        `protobuf:"bytes,13,opt,name=service_id,json=serviceId,proto3,oneof" json:"service_id,omitempty"`
	OnlineStatus    *string                        `protobuf:"bytes,14,opt,name=online_status,json=onlineStatus,proto3,oneof" json:"online_status,omitempty"`
	ActiveStatus    *string                        `protobuf:"bytes,15,opt,name=active_status,json=activeStatus,proto3,oneof" json:"active_status,omitempty"`
	CloudDeviceId   *string                        `protobuf:"bytes,16,opt,name=cloud_device_id,json=cloudDeviceId,proto3,oneof" json:"cloud_device_id,omitempty"`
	ScreenType      []string                       `protobuf:"bytes,17,rep,name=screen_type,json=screenType,proto3" json:"screen_type,omitempty"`
	ParentCloudId   string                         `protobuf:"bytes,18,opt,name=parent_cloud_id,json=parentCloudId,proto3" json:"parent_cloud_id,omitempty"`     // 父级id
	IsScreenDevice  bool                           `protobuf:"varint,19,opt,name=is_screen_device,json=isScreenDevice,proto3" json:"is_screen_device,omitempty"` // 是否为中控设备
}

func (x *DeviceUpdateInfo) Reset() {
	*x = DeviceUpdateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_device_device_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceUpdateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceUpdateInfo) ProtoMessage() {}

func (x *DeviceUpdateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_device_device_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceUpdateInfo.ProtoReflect.Descriptor instead.
func (*DeviceUpdateInfo) Descriptor() ([]byte, []int) {
	return file_proto_device_device_proto_rawDescGZIP(), []int{4}
}

func (x *DeviceUpdateInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeviceUpdateInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DeviceUpdateInfo) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *DeviceUpdateInfo) GetProductId() string {
	if x != nil && x.ProductId != nil {
		return *x.ProductId
	}
	return ""
}

func (x *DeviceUpdateInfo) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *DeviceUpdateInfo) GetLat() string {
	if x != nil && x.Lat != nil {
		return *x.Lat
	}
	return ""
}

func (x *DeviceUpdateInfo) GetLon() string {
	if x != nil && x.Lon != nil {
		return *x.Lon
	}
	return ""
}

func (x *DeviceUpdateInfo) GetVendorCode() string {
	if x != nil && x.VendorCode != nil {
		return *x.VendorCode
	}
	return ""
}

func (x *DeviceUpdateInfo) GetInstallLocation() string {
	if x != nil && x.InstallLocation != nil {
		return *x.InstallLocation
	}
	return ""
}

func (x *DeviceUpdateInfo) GetExtendData() string {
	if x != nil && x.ExtendData != nil {
		return *x.ExtendData
	}
	return ""
}

func (x *DeviceUpdateInfo) GetProtocols() map[string]*ProtocolProperties {
	if x != nil {
		return x.Protocols
	}
	return nil
}

func (x *DeviceUpdateInfo) GetServiceId() string {
	if x != nil && x.ServiceId != nil {
		return *x.ServiceId
	}
	return ""
}

func (x *DeviceUpdateInfo) GetOnlineStatus() string {
	if x != nil && x.OnlineStatus != nil {
		return *x.OnlineStatus
	}
	return ""
}

func (x *DeviceUpdateInfo) GetActiveStatus() string {
	if x != nil && x.ActiveStatus != nil {
		return *x.ActiveStatus
	}
	return ""
}

func (x *DeviceUpdateInfo) GetCloudDeviceId() string {
	if x != nil && x.CloudDeviceId != nil {
		return *x.CloudDeviceId
	}
	return ""
}

func (x *DeviceUpdateInfo) GetScreenType() []string {
	if x != nil {
		return x.ScreenType
	}
	return nil
}

func (x *DeviceUpdateInfo) GetParentCloudId() string {
	if x != nil {
		return x.ParentCloudId
	}
	return ""
}

func (x *DeviceUpdateInfo) GetIsScreenDevice() bool {
	if x != nil {
		return x.IsScreenDevice
	}
	return false
}

type UpdateDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateDevice *DeviceUpdateInfo `protobuf:"bytes,1,opt,name=updateDevice,proto3" json:"updateDevice,omitempty"`
}

func (x *UpdateDeviceRequest) Reset() {
	*x = UpdateDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_device_device_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceRequest) ProtoMessage() {}

func (x *UpdateDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_device_device_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceRequest.ProtoReflect.Descriptor instead.
func (*UpdateDeviceRequest) Descriptor() ([]byte, []int) {
	return file_proto_device_device_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateDeviceRequest) GetUpdateDevice() *DeviceUpdateInfo {
	if x != nil {
		return x.UpdateDevice
	}
	return nil
}

// 设备查询请求
type DeviceSearchQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseSearchConditionQuery *common.BaseSearchConditionQuery `protobuf:"bytes,1,opt,name=base_search_condition_query,json=baseSearchConditionQuery,proto3" json:"base_search_condition_query,omitempty"`
	ActiveStatuses           string                           `protobuf:"bytes,2,opt,name=active_statuses,json=activeStatuses,proto3" json:"active_statuses,omitempty"`
	ServiceId                string                           `protobuf:"bytes,3,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	ProductId                string                           `protobuf:"bytes,4,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	Status                   string                           `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	ActiveStatus             string                           `protobuf:"bytes,6,opt,name=active_status,json=activeStatus,proto3" json:"active_status,omitempty"`
	CloudDeviceIds           string                           `protobuf:"bytes,7,opt,name=cloud_device_ids,json=cloudDeviceIds,proto3" json:"cloud_device_ids,omitempty"`
	IdOrNameLike             string                           `protobuf:"bytes,8,opt,name=id_or_name_like,json=idOrNameLike,proto3" json:"id_or_name_like,omitempty"`
}

func (x *DeviceSearchQueryRequest) Reset() {
	*x = DeviceSearchQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_device_device_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceSearchQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceSearchQueryRequest) ProtoMessage() {}

func (x *DeviceSearchQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_device_device_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceSearchQueryRequest.ProtoReflect.Descriptor instead.
func (*DeviceSearchQueryRequest) Descriptor() ([]byte, []int) {
	return file_proto_device_device_proto_rawDescGZIP(), []int{6}
}

func (x *DeviceSearchQueryRequest) GetBaseSearchConditionQuery() *common.BaseSearchConditionQuery {
	if x != nil {
		return x.BaseSearchConditionQuery
	}
	return nil
}

func (x *DeviceSearchQueryRequest) GetActiveStatuses() string {
	if x != nil {
		return x.ActiveStatuses
	}
	return ""
}

func (x *DeviceSearchQueryRequest) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *DeviceSearchQueryRequest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *DeviceSearchQueryRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DeviceSearchQueryRequest) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *DeviceSearchQueryRequest) GetCloudDeviceIds() string {
	if x != nil {
		return x.CloudDeviceIds
	}
	return ""
}

func (x *DeviceSearchQueryRequest) GetIdOrNameLike() string {
	if x != nil {
		return x.IdOrNameLike
	}
	return ""
}

//查询子设备
type DeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` //不可更改，必填
	Name            string                         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description     string                         `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ProductId       string                         `protobuf:"bytes,4,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	Ip              string                         `protobuf:"bytes,5,opt,name=ip,proto3" json:"ip,omitempty"`
	Lat             string                         `protobuf:"bytes,6,opt,name=lat,proto3" json:"lat,omitempty"`
	Lon             string                         `protobuf:"bytes,7,opt,name=lon,proto3" json:"lon,omitempty"`
	VendorCode      string                         `protobuf:"bytes,8,opt,name=vendorCode,proto3" json:"vendorCode,omitempty"`
	InstallLocation string                         `protobuf:"bytes,9,opt,name=installLocation,proto3" json:"installLocation,omitempty"`
	ExtendData      string                         `protobuf:"bytes,10,opt,name=extend_data,json=extendData,proto3" json:"extend_data,omitempty"`
	IsIpcDev        bool                           `protobuf:"varint,11,opt,name=is_ipc_dev,json=isIpcDev,proto3" json:"is_ipc_dev,omitempty"` //设备增加后不可更改，默认为false
	Protocols       map[string]*ProtocolProperties `protobuf:"bytes,12,rep,name=protocols,proto3" json:"protocols,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ServiceId       string                         `protobuf:"bytes,13,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	OnlineStatus    string                         `protobuf:"bytes,14,opt,name=online_status,json=onlineStatus,proto3" json:"online_status,omitempty"`
	ActiveStatus    string                         `protobuf:"bytes,15,opt,name=active_status,json=activeStatus,proto3" json:"active_status,omitempty"`
	CloudDeviceId   string                         `protobuf:"bytes,16,opt,name=cloud_device_id,json=cloudDeviceId,proto3" json:"cloud_device_id,omitempty"`
	ScreenType      []string                       `protobuf:"bytes,17,rep,name=screen_type,json=screenType,proto3" json:"screen_type,omitempty"`
	ParentCloudId   string                         `protobuf:"bytes,18,opt,name=parent_cloud_id,json=parentCloudId,proto3" json:"parent_cloud_id,omitempty"`     // 父级id
	IsScreenDevice  bool                           `protobuf:"varint,19,opt,name=is_screen_device,json=isScreenDevice,proto3" json:"is_screen_device,omitempty"` // 是否为中控设备
}

func (x *DeviceInfo) Reset() {
	*x = DeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_device_device_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfo) ProtoMessage() {}

func (x *DeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_device_device_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfo.ProtoReflect.Descriptor instead.
func (*DeviceInfo) Descriptor() ([]byte, []int) {
	return file_proto_device_device_proto_rawDescGZIP(), []int{7}
}

func (x *DeviceInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeviceInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeviceInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DeviceInfo) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *DeviceInfo) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *DeviceInfo) GetLat() string {
	if x != nil {
		return x.Lat
	}
	return ""
}

func (x *DeviceInfo) GetLon() string {
	if x != nil {
		return x.Lon
	}
	return ""
}

func (x *DeviceInfo) GetVendorCode() string {
	if x != nil {
		return x.VendorCode
	}
	return ""
}

func (x *DeviceInfo) GetInstallLocation() string {
	if x != nil {
		return x.InstallLocation
	}
	return ""
}

func (x *DeviceInfo) GetExtendData() string {
	if x != nil {
		return x.ExtendData
	}
	return ""
}

func (x *DeviceInfo) GetIsIpcDev() bool {
	if x != nil {
		return x.IsIpcDev
	}
	return false
}

func (x *DeviceInfo) GetProtocols() map[string]*ProtocolProperties {
	if x != nil {
		return x.Protocols
	}
	return nil
}

func (x *DeviceInfo) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *DeviceInfo) GetOnlineStatus() string {
	if x != nil {
		return x.OnlineStatus
	}
	return ""
}

func (x *DeviceInfo) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *DeviceInfo) GetCloudDeviceId() string {
	if x != nil {
		return x.CloudDeviceId
	}
	return ""
}

func (x *DeviceInfo) GetScreenType() []string {
	if x != nil {
		return x.ScreenType
	}
	return nil
}

func (x *DeviceInfo) GetParentCloudId() string {
	if x != nil {
		return x.ParentCloudId
	}
	return ""
}

func (x *DeviceInfo) GetIsScreenDevice() bool {
	if x != nil {
		return x.IsScreenDevice
	}
	return false
}

// 设备查询响应
type MultiDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total   uint32        `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Devices []*DeviceInfo `protobuf:"bytes,2,rep,name=devices,proto3" json:"devices,omitempty"`
}

func (x *MultiDeviceResponse) Reset() {
	*x = MultiDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_device_device_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiDeviceResponse) ProtoMessage() {}

func (x *MultiDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_device_device_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiDeviceResponse.ProtoReflect.Descriptor instead.
func (*MultiDeviceResponse) Descriptor() ([]byte, []int) {
	return file_proto_device_device_proto_rawDescGZIP(), []int{8}
}

func (x *MultiDeviceResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *MultiDeviceResponse) GetDevices() []*DeviceInfo {
	if x != nil {
		return x.Devices
	}
	return nil
}

// 通过设备ID查询
type DeviceByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeviceByIdRequest) Reset() {
	*x = DeviceByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_device_device_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceByIdRequest) ProtoMessage() {}

func (x *DeviceByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_device_device_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceByIdRequest.ProtoReflect.Descriptor instead.
func (*DeviceByIdRequest) Descriptor() ([]byte, []int) {
	return file_proto_device_device_proto_rawDescGZIP(), []int{9}
}

func (x *DeviceByIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// 设备删除
type DeleteDeviceByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteDeviceByIdRequest) Reset() {
	*x = DeleteDeviceByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_device_device_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDeviceByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeviceByIdRequest) ProtoMessage() {}

func (x *DeleteDeviceByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_device_device_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeviceByIdRequest.ProtoReflect.Descriptor instead.
func (*DeleteDeviceByIdRequest) Descriptor() ([]byte, []int) {
	return file_proto_device_device_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteDeviceByIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// 设备状态
type DeviceOnlineAndOfflineList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Online  []string `protobuf:"bytes,1,rep,name=online,proto3" json:"online,omitempty"`
	Offline []string `protobuf:"bytes,2,rep,name=offline,proto3" json:"offline,omitempty"`
}

func (x *DeviceOnlineAndOfflineList) Reset() {
	*x = DeviceOnlineAndOfflineList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_device_device_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceOnlineAndOfflineList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceOnlineAndOfflineList) ProtoMessage() {}

func (x *DeviceOnlineAndOfflineList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_device_device_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceOnlineAndOfflineList.ProtoReflect.Descriptor instead.
func (*DeviceOnlineAndOfflineList) Descriptor() ([]byte, []int) {
	return file_proto_device_device_proto_rawDescGZIP(), []int{11}
}

func (x *DeviceOnlineAndOfflineList) GetOnline() []string {
	if x != nil {
		return x.Online
	}
	return nil
}

func (x *DeviceOnlineAndOfflineList) GetOffline() []string {
	if x != nil {
		return x.Offline
	}
	return nil
}

//子设备激活
type DeviceActive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    []string `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
	IsAll bool     `protobuf:"varint,2,opt,name=is_all,json=isAll,proto3" json:"is_all,omitempty"`
}

func (x *DeviceActive) Reset() {
	*x = DeviceActive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_device_device_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceActive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceActive) ProtoMessage() {}

func (x *DeviceActive) ProtoReflect() protoreflect.Message {
	mi := &file_proto_device_device_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceActive.ProtoReflect.Descriptor instead.
func (*DeviceActive) Descriptor() ([]byte, []int) {
	return file_proto_device_device_proto_rawDescGZIP(), []int{12}
}

func (x *DeviceActive) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceActive) GetIsAll() bool {
	if x != nil {
		return x.IsAll
	}
	return false
}

//子设备激活响应
type ActiveDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessNum          int32                 `protobuf:"varint,1,opt,name=process_num,json=processNum,proto3" json:"process_num,omitempty"`
	SuccessNum          int32                 `protobuf:"varint,2,opt,name=success_num,json=successNum,proto3" json:"success_num,omitempty"`
	FailNum             int32                 `protobuf:"varint,3,opt,name=fail_num,json=failNum,proto3" json:"fail_num,omitempty"`
	ActiveDeviceResults []*ActiveDeviceResult `protobuf:"bytes,4,rep,name=active_device_results,json=activeDeviceResults,proto3" json:"active_device_results,omitempty"`
}

func (x *ActiveDeviceResponse) Reset() {
	*x = ActiveDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_device_device_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveDeviceResponse) ProtoMessage() {}

func (x *ActiveDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_device_device_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveDeviceResponse.ProtoReflect.Descriptor instead.
func (*ActiveDeviceResponse) Descriptor() ([]byte, []int) {
	return file_proto_device_device_proto_rawDescGZIP(), []int{13}
}

func (x *ActiveDeviceResponse) GetProcessNum() int32 {
	if x != nil {
		return x.ProcessNum
	}
	return 0
}

func (x *ActiveDeviceResponse) GetSuccessNum() int32 {
	if x != nil {
		return x.SuccessNum
	}
	return 0
}

func (x *ActiveDeviceResponse) GetFailNum() int32 {
	if x != nil {
		return x.FailNum
	}
	return 0
}

func (x *ActiveDeviceResponse) GetActiveDeviceResults() []*ActiveDeviceResult {
	if x != nil {
		return x.ActiveDeviceResults
	}
	return nil
}

//子设备激活结果
type ActiveDeviceResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProcessSuccess bool   `protobuf:"varint,3,opt,name=process_success,json=processSuccess,proto3" json:"process_success,omitempty"`
	ActiveStatus   string `protobuf:"bytes,4,opt,name=active_status,json=activeStatus,proto3" json:"active_status,omitempty"`
	Remark         string `protobuf:"bytes,5,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *ActiveDeviceResult) Reset() {
	*x = ActiveDeviceResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_device_device_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveDeviceResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveDeviceResult) ProtoMessage() {}

func (x *ActiveDeviceResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_device_device_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveDeviceResult.ProtoReflect.Descriptor instead.
func (*ActiveDeviceResult) Descriptor() ([]byte, []int) {
	return file_proto_device_device_proto_rawDescGZIP(), []int{14}
}

func (x *ActiveDeviceResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ActiveDeviceResult) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ActiveDeviceResult) GetProcessSuccess() bool {
	if x != nil {
		return x.ProcessSuccess
	}
	return false
}

func (x *ActiveDeviceResult) GetActiveStatus() string {
	if x != nil {
		return x.ActiveStatus
	}
	return ""
}

func (x *ActiveDeviceResult) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

var File_proto_device_device_proto protoreflect.FileDescriptor

var file_proto_device_device_proto_rawDesc = []byte{
	0x0a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x1a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7f, 0x0a, 0x12, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x32, 0x0a, 0x02, 0x70, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x50, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x02, 0x70, 0x70, 0x1a, 0x35, 0x0a, 0x07, 0x50, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd3, 0x05, 0x0a,
	0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6c, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x69, 0x70, 0x63, 0x5f, 0x64, 0x65, 0x76,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x49, 0x70, 0x63, 0x44, 0x65, 0x76,
	0x12, 0x42, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x69, 0x73, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x58, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x41, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x44, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x64, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0xb5, 0x07, 0x0a, 0x10,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x02, 0x69, 0x70, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6c, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x15, 0x0a, 0x03, 0x6c, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52,
	0x03, 0x6c, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0a, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x08, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01,
	0x01, 0x12, 0x45, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0c, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52,
	0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x2b, 0x0a, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0d, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x69, 0x73, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x1a, 0x58, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x70, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6c, 0x61,
	0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6c, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x22, 0x53, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0c, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0xf0, 0x02, 0x0a, 0x18, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x1b, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x18, 0x62, 0x61,
	0x73, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0f, 0x69, 0x64, 0x5f, 0x6f, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69,
	0x64, 0x4f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x6b, 0x65, 0x22, 0xcd, 0x05, 0x0a, 0x0a,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12,
	0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x61,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6c, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x69, 0x70, 0x63, 0x5f, 0x64, 0x65, 0x76, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x49, 0x70, 0x63, 0x44, 0x65, 0x76, 0x12, 0x3f, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x73, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x69, 0x73, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x1a, 0x58, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x59, 0x0a, 0x13, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x23, 0x0a, 0x11, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x29, 0x0a, 0x17, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4e, 0x0a, 0x1a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x35, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x61, 0x6c, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x41, 0x6c, 0x6c, 0x22, 0xc3, 0x01,
	0x0a, 0x14, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x61, 0x69, 0x6c,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c,
	0x4e, 0x75, 0x6d, 0x12, 0x4e, 0x0a, 0x15, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x13,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x12, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x32, 0x9a, 0x04, 0x0a, 0x09, 0x52, 0x70, 0x63, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x18, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x14, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x1a, 0x1c, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x49, 0x64,
	0x12, 0x19, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x00, 0x12, 0x4d, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x50, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x12, 0x20, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5d, 0x0a, 0x1d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x22, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x42, 0x21, 0x5a, 0x1f, 0x65, 0x64, 0x67, 0x65, 0x78, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_device_device_proto_rawDescOnce sync.Once
	file_proto_device_device_proto_rawDescData = file_proto_device_device_proto_rawDesc
)

func file_proto_device_device_proto_rawDescGZIP() []byte {
	file_proto_device_device_proto_rawDescOnce.Do(func() {
		file_proto_device_device_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_device_device_proto_rawDescData)
	})
	return file_proto_device_device_proto_rawDescData
}

var file_proto_device_device_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_proto_device_device_proto_goTypes = []interface{}{
	(*ProtocolProperties)(nil),              // 0: device.ProtocolProperties
	(*DeviceAddInfo)(nil),                   // 1: device.DeviceAddInfo
	(*AddDeviceRequest)(nil),                // 2: device.AddDeviceRequest
	(*AddDevicesRequest)(nil),               // 3: device.AddDevicesRequest
	(*DeviceUpdateInfo)(nil),                // 4: device.DeviceUpdateInfo
	(*UpdateDeviceRequest)(nil),             // 5: device.UpdateDeviceRequest
	(*DeviceSearchQueryRequest)(nil),        // 6: device.DeviceSearchQueryRequest
	(*DeviceInfo)(nil),                      // 7: device.DeviceInfo
	(*MultiDeviceResponse)(nil),             // 8: device.MultiDeviceResponse
	(*DeviceByIdRequest)(nil),               // 9: device.DeviceByIdRequest
	(*DeleteDeviceByIdRequest)(nil),         // 10: device.DeleteDeviceByIdRequest
	(*DeviceOnlineAndOfflineList)(nil),      // 11: device.DeviceOnlineAndOfflineList
	(*DeviceActive)(nil),                    // 12: device.DeviceActive
	(*ActiveDeviceResponse)(nil),            // 13: device.ActiveDeviceResponse
	(*ActiveDeviceResult)(nil),              // 14: device.ActiveDeviceResult
	nil,                                     // 15: device.ProtocolProperties.PpEntry
	nil,                                     // 16: device.DeviceAddInfo.ProtocolsEntry
	nil,                                     // 17: device.DeviceUpdateInfo.ProtocolsEntry
	nil,                                     // 18: device.DeviceInfo.ProtocolsEntry
	(*common.BaseSearchConditionQuery)(nil), // 19: common.BaseSearchConditionQuery
	(*emptypb.Empty)(nil),                   // 20: google.protobuf.Empty
}
var file_proto_device_device_proto_depIdxs = []int32{
	15, // 0: device.ProtocolProperties.pp:type_name -> device.ProtocolProperties.PpEntry
	16, // 1: device.DeviceAddInfo.protocols:type_name -> device.DeviceAddInfo.ProtocolsEntry
	1,  // 2: device.AddDeviceRequest.device:type_name -> device.DeviceAddInfo
	1,  // 3: device.AddDevicesRequest.devices:type_name -> device.DeviceAddInfo
	17, // 4: device.DeviceUpdateInfo.protocols:type_name -> device.DeviceUpdateInfo.ProtocolsEntry
	4,  // 5: device.UpdateDeviceRequest.updateDevice:type_name -> device.DeviceUpdateInfo
	19, // 6: device.DeviceSearchQueryRequest.base_search_condition_query:type_name -> common.BaseSearchConditionQuery
	18, // 7: device.DeviceInfo.protocols:type_name -> device.DeviceInfo.ProtocolsEntry
	7,  // 8: device.MultiDeviceResponse.devices:type_name -> device.DeviceInfo
	14, // 9: device.ActiveDeviceResponse.active_device_results:type_name -> device.ActiveDeviceResult
	0,  // 10: device.DeviceAddInfo.ProtocolsEntry.value:type_name -> device.ProtocolProperties
	0,  // 11: device.DeviceUpdateInfo.ProtocolsEntry.value:type_name -> device.ProtocolProperties
	0,  // 12: device.DeviceInfo.ProtocolsEntry.value:type_name -> device.ProtocolProperties
	2,  // 13: device.RpcDevice.AddDevice:input_type -> device.AddDeviceRequest
	12, // 14: device.RpcDevice.ActivateDevice:input_type -> device.DeviceActive
	5,  // 15: device.RpcDevice.UpdateDevice:input_type -> device.UpdateDeviceRequest
	9,  // 16: device.RpcDevice.DeviceById:input_type -> device.DeviceByIdRequest
	10, // 17: device.RpcDevice.DeleteDeviceById:input_type -> device.DeleteDeviceByIdRequest
	6,  // 18: device.RpcDevice.DevicesSearch:input_type -> device.DeviceSearchQueryRequest
	11, // 19: device.RpcDevice.ReportDevicesOnlineAndOffline:input_type -> device.DeviceOnlineAndOfflineList
	20, // 20: device.RpcDevice.AddDevice:output_type -> google.protobuf.Empty
	13, // 21: device.RpcDevice.ActivateDevice:output_type -> device.ActiveDeviceResponse
	20, // 22: device.RpcDevice.UpdateDevice:output_type -> google.protobuf.Empty
	7,  // 23: device.RpcDevice.DeviceById:output_type -> device.DeviceInfo
	20, // 24: device.RpcDevice.DeleteDeviceById:output_type -> google.protobuf.Empty
	8,  // 25: device.RpcDevice.DevicesSearch:output_type -> device.MultiDeviceResponse
	20, // 26: device.RpcDevice.ReportDevicesOnlineAndOffline:output_type -> google.protobuf.Empty
	20, // [20:27] is the sub-list for method output_type
	13, // [13:20] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_proto_device_device_proto_init() }
func file_proto_device_device_proto_init() {
	if File_proto_device_device_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_device_device_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_device_device_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceAddInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_device_device_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_device_device_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDevicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_device_device_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceUpdateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_device_device_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_device_device_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceSearchQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_device_device_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_device_device_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_device_device_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_device_device_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDeviceByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_device_device_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceOnlineAndOfflineList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_device_device_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceActive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_device_device_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActiveDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_device_device_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActiveDeviceResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_device_device_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_device_device_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_device_device_proto_goTypes,
		DependencyIndexes: file_proto_device_device_proto_depIdxs,
		MessageInfos:      file_proto_device_device_proto_msgTypes,
	}.Build()
	File_proto_device_device_proto = out.File
	file_proto_device_device_proto_rawDesc = nil
	file_proto_device_device_proto_goTypes = nil
	file_proto_device_device_proto_depIdxs = nil
}
