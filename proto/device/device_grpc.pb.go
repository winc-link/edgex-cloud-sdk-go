// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: proto/device/device.proto

package device

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RpcDeviceClient is the client API for RpcDevice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RpcDeviceClient interface {
	// 添加新的设备
	AddDevice(ctx context.Context, in *AddDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 激活子设备
	ActivateDevice(ctx context.Context, in *DeviceActive, opts ...grpc.CallOption) (*ActiveDeviceResponse, error)
	// 更新设备属性
	UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 根据设备ID查询设备信息
	DeviceById(ctx context.Context, in *DeviceByIdRequest, opts ...grpc.CallOption) (*DeviceInfo, error)
	// 根据设备ID删除设备
	DeleteDeviceById(ctx context.Context, in *DeleteDeviceByIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 条件查询设备
	DevicesSearch(ctx context.Context, in *DeviceSearchQueryRequest, opts ...grpc.CallOption) (*MultiDeviceResponse, error)
	// 上报设备上下线状态
	ReportDevicesOnlineAndOffline(ctx context.Context, in *DeviceOnlineAndOfflineList, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type rpcDeviceClient struct {
	cc grpc.ClientConnInterface
}

func NewRpcDeviceClient(cc grpc.ClientConnInterface) RpcDeviceClient {
	return &rpcDeviceClient{cc}
}

func (c *rpcDeviceClient) AddDevice(ctx context.Context, in *AddDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/device.RpcDevice/AddDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcDeviceClient) ActivateDevice(ctx context.Context, in *DeviceActive, opts ...grpc.CallOption) (*ActiveDeviceResponse, error) {
	out := new(ActiveDeviceResponse)
	err := c.cc.Invoke(ctx, "/device.RpcDevice/ActivateDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcDeviceClient) UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/device.RpcDevice/UpdateDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcDeviceClient) DeviceById(ctx context.Context, in *DeviceByIdRequest, opts ...grpc.CallOption) (*DeviceInfo, error) {
	out := new(DeviceInfo)
	err := c.cc.Invoke(ctx, "/device.RpcDevice/DeviceById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcDeviceClient) DeleteDeviceById(ctx context.Context, in *DeleteDeviceByIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/device.RpcDevice/DeleteDeviceById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcDeviceClient) DevicesSearch(ctx context.Context, in *DeviceSearchQueryRequest, opts ...grpc.CallOption) (*MultiDeviceResponse, error) {
	out := new(MultiDeviceResponse)
	err := c.cc.Invoke(ctx, "/device.RpcDevice/DevicesSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcDeviceClient) ReportDevicesOnlineAndOffline(ctx context.Context, in *DeviceOnlineAndOfflineList, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/device.RpcDevice/ReportDevicesOnlineAndOffline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcDeviceServer is the server API for RpcDevice service.
// All implementations must embed UnimplementedRpcDeviceServer
// for forward compatibility
type RpcDeviceServer interface {
	// 添加新的设备
	AddDevice(context.Context, *AddDeviceRequest) (*emptypb.Empty, error)
	// 激活子设备
	ActivateDevice(context.Context, *DeviceActive) (*ActiveDeviceResponse, error)
	// 更新设备属性
	UpdateDevice(context.Context, *UpdateDeviceRequest) (*emptypb.Empty, error)
	// 根据设备ID查询设备信息
	DeviceById(context.Context, *DeviceByIdRequest) (*DeviceInfo, error)
	// 根据设备ID删除设备
	DeleteDeviceById(context.Context, *DeleteDeviceByIdRequest) (*emptypb.Empty, error)
	// 条件查询设备
	DevicesSearch(context.Context, *DeviceSearchQueryRequest) (*MultiDeviceResponse, error)
	// 上报设备上下线状态
	ReportDevicesOnlineAndOffline(context.Context, *DeviceOnlineAndOfflineList) (*emptypb.Empty, error)
	mustEmbedUnimplementedRpcDeviceServer()
}

// UnimplementedRpcDeviceServer must be embedded to have forward compatible implementations.
type UnimplementedRpcDeviceServer struct {
}

func (UnimplementedRpcDeviceServer) AddDevice(context.Context, *AddDeviceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDevice not implemented")
}
func (UnimplementedRpcDeviceServer) ActivateDevice(context.Context, *DeviceActive) (*ActiveDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateDevice not implemented")
}
func (UnimplementedRpcDeviceServer) UpdateDevice(context.Context, *UpdateDeviceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDevice not implemented")
}
func (UnimplementedRpcDeviceServer) DeviceById(context.Context, *DeviceByIdRequest) (*DeviceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceById not implemented")
}
func (UnimplementedRpcDeviceServer) DeleteDeviceById(context.Context, *DeleteDeviceByIdRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeviceById not implemented")
}
func (UnimplementedRpcDeviceServer) DevicesSearch(context.Context, *DeviceSearchQueryRequest) (*MultiDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DevicesSearch not implemented")
}
func (UnimplementedRpcDeviceServer) ReportDevicesOnlineAndOffline(context.Context, *DeviceOnlineAndOfflineList) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportDevicesOnlineAndOffline not implemented")
}
func (UnimplementedRpcDeviceServer) mustEmbedUnimplementedRpcDeviceServer() {}

// UnsafeRpcDeviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RpcDeviceServer will
// result in compilation errors.
type UnsafeRpcDeviceServer interface {
	mustEmbedUnimplementedRpcDeviceServer()
}

func RegisterRpcDeviceServer(s grpc.ServiceRegistrar, srv RpcDeviceServer) {
	s.RegisterService(&RpcDevice_ServiceDesc, srv)
}

func _RpcDevice_AddDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcDeviceServer).AddDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.RpcDevice/AddDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcDeviceServer).AddDevice(ctx, req.(*AddDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcDevice_ActivateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceActive)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcDeviceServer).ActivateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.RpcDevice/ActivateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcDeviceServer).ActivateDevice(ctx, req.(*DeviceActive))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcDevice_UpdateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcDeviceServer).UpdateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.RpcDevice/UpdateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcDeviceServer).UpdateDevice(ctx, req.(*UpdateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcDevice_DeviceById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcDeviceServer).DeviceById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.RpcDevice/DeviceById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcDeviceServer).DeviceById(ctx, req.(*DeviceByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcDevice_DeleteDeviceById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcDeviceServer).DeleteDeviceById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.RpcDevice/DeleteDeviceById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcDeviceServer).DeleteDeviceById(ctx, req.(*DeleteDeviceByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcDevice_DevicesSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceSearchQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcDeviceServer).DevicesSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.RpcDevice/DevicesSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcDeviceServer).DevicesSearch(ctx, req.(*DeviceSearchQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcDevice_ReportDevicesOnlineAndOffline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceOnlineAndOfflineList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcDeviceServer).ReportDevicesOnlineAndOffline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.RpcDevice/ReportDevicesOnlineAndOffline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcDeviceServer).ReportDevicesOnlineAndOffline(ctx, req.(*DeviceOnlineAndOfflineList))
	}
	return interceptor(ctx, in, info, handler)
}

// RpcDevice_ServiceDesc is the grpc.ServiceDesc for RpcDevice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RpcDevice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "device.RpcDevice",
	HandlerType: (*RpcDeviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDevice",
			Handler:    _RpcDevice_AddDevice_Handler,
		},
		{
			MethodName: "ActivateDevice",
			Handler:    _RpcDevice_ActivateDevice_Handler,
		},
		{
			MethodName: "UpdateDevice",
			Handler:    _RpcDevice_UpdateDevice_Handler,
		},
		{
			MethodName: "DeviceById",
			Handler:    _RpcDevice_DeviceById_Handler,
		},
		{
			MethodName: "DeleteDeviceById",
			Handler:    _RpcDevice_DeleteDeviceById_Handler,
		},
		{
			MethodName: "DevicesSearch",
			Handler:    _RpcDevice_DevicesSearch_Handler,
		},
		{
			MethodName: "ReportDevicesOnlineAndOffline",
			Handler:    _RpcDevice_ReportDevicesOnlineAndOffline_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/device/device.proto",
}
